import flixel.group.FlxTypedSpriteGroup;
import funkin.graphics.FunkinSprite;
import funkin.audio.FunkinSound;
import flixel.FlxG;
import funkin.save.Save;
import funkin.util.HapticUtil;
import funkin.util.Constants;


class ComboSwoosh extends FlxTypedSpriteGroup {

    public var coolCombo:FunkinSprite;

    var testCombo = 990;

    // Offsets for the coolNumbers, each index represents a number.
    var numberOffset = [0,40];

    // Width of first frame - width of orange and yellow frame.
    public var coolComboOffset = 859 - 560;

    public var comboScale = 1;

    public var numberGroup:FlxTypedSpriteGroup;

    var originalX = 0;

    public function new(x = 300, y = 200)
    {
        super(x,y);
        
        coolCombo = new FunkinSprite(-coolComboOffset, 0);
        coolCombo.loadSparrow("noteCombo");
        coolCombo.animation.addByPrefix("combo", "NOTE COMBO animation instance", 24, false);
        coolCombo.scale.set(comboScale, comboScale);

        numberGroup = new FlxTypedSpriteGroup();
        numberGroup.setPosition(coolCombo.x + coolComboOffset + (coolCombo.width / 4), coolCombo.y);
        numberGroup.y -= (comboScale - 1) * 75;
        numberGroup.x -= (comboScale - 1) * 20;

        add(coolCombo);
        add(numberGroup);


        visible = false;
    }

    override public function update(elapsed)
    {
        super.update(elapsed);
        if (FlxG.keys.justPressed.N)
        {
            // coolCombo.animation.play("combo", true);
            playCombo(testCombo);
            testCombo++;
        }
    }

    public function playCombo(combo:Int)
    {
        // combo = 100;
        var comboToString = Std.string(combo);


        if (Save.instance.modOptions["ComboSwooshCamera"] == "HUD" && Save.instance.modOptions["ComboSwooshPosition"] == "Left")
        {
            x = originalX + ((100 * (comboToString.length - 2)) * comboScale);
        }
    
        for (i in 0...comboToString.length)
        {
            var coolNumber = new FunkinSprite();
            coolNumber.loadSparrow("noteComboNumbers");
   
            var curNum = comboToString.length - (i + 1);
            trace("test: " + curNum);
            //No more lag spike (shouldnt have added all the numbers in the loop)
            coolNumber.animation.addByPrefix(comboToString.charAt(curNum), comboToString.charAt(curNum), 20, false);
            coolNumber.animation.play(comboToString.charAt(curNum), false, FlxG.save.data.reversenumanim);
            coolNumber.updateHitbox();
            coolNumber.scale.set(comboScale, comboScale);

            // Manual offset because it looks horrible
            if (comboToString.charAt(curNum) == "5")
            {
                coolNumber.offset.set(5, 10);
            }
            if (curNum == comboToString.length - 1)
            {
                coolNumber.x -= coolNumber.width - 40;
            }
            else
            {
                coolNumber.x -= (numberGroup.x - numberGroup.members[i - 1].x) + coolNumber.width;
                coolNumber.x -= (comboScale - 1) * (numberGroup.members[i - 1].width - 40);
                coolNumber.x += 30;

                coolNumber.y += (35 * i) * comboScale;

            }

       
            numberGroup.add(coolNumber);

            coolNumber.animation.finishCallback = function(combo)
            {
            	numberGroup.clear();
            }
        }
        if (FlxG.save.data.combosound)
        {
            FunkinSound.playOnce(Paths.sound("comboSound"));
        }

        visible = true;
        coolCombo.animation.play("combo", true);
        if (FlxG.onMobile)
        {
            HapticUtil.vibrate(0, 0.01);
        }

        coolCombo.animation.finishCallback = function(combo)
		{
			visible = false;
            x = originalX;
        }
    }

    override public function setPosition(x,y)
    {
        super.setPosition(x,y);
        originalX = x;
    }
}