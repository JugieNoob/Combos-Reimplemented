import flixel.group.FlxTypedSpriteGroup;
import funkin.graphics.FunkinSprite;
import funkin.audio.FunkinSound;
import flixel.FlxG;


class ComboSwoosh extends FlxTypedSpriteGroup {

    public var coolCombo:FunkinSprite;

    var testCombo = 90;

    // Offsets for the coolNumbers, each index represents a number.
    var numberOffset = [0,40];

    // Width of first frame - width of orange and yellow frame.
    var coolComboOffset = 859 - 560;

    public var numberGroup:FlxTypedSpriteGroup;

    public function new(x = 300, y = 200)
    {
        super(x,y);
        coolCombo = new FunkinSprite(-coolComboOffset, 0);
        numberGroup = new FlxTypedSpriteGroup();
        // 30, 300
        coolCombo.loadSparrow("noteCombo");
        coolCombo.animation.addByPrefix("combo", "NOTE COMBO animation instance", 24, false);
        // coolCombo.visible = false;

        add(coolCombo);
        add(numberGroup);

        visible = false;
    }

    override public function update(elapsed)
    {
        super.update(elapsed);
        if (FlxG.keys.justPressed.N)
        {
            // coolCombo.animation.play("combo", true);
            playCombo(testCombo);
            testCombo++;
        }
    }

    public function playCombo(combo:Int)
    {
        // combo = 100;
        var comboToString = Std.string(combo);

        for (i in 0...comboToString.length)
        {
            var coolNumber = new FunkinSprite();
            coolNumber.loadSparrow("noteComboNumbers");
   
            var curNum = comboToString.length - (i + 1);
            trace("test: " + curNum);
            //No more lag spike (shouldnt have added all the numbers in the loop)
            coolNumber.animation.addByPrefix(comboToString.charAt(curNum), comboToString.charAt(curNum), 20, false);
            coolNumber.animation.play(comboToString.charAt(curNum), false, FlxG.save.data.reversenumanim);
            coolNumber.updateHitbox();

            // Manual offset because it looks horrible
            if (comboToString.charAt(curNum) == "5")
            {
                coolNumber.offset.set(10, 20);
            }

            // coolNumber.setPosition(((-50 - (coolNumber.width / 2)) * (comboToString.length - i)) + 575, (35 * (comboToString.length - i)) - 35); //35
            //  + numberOffset[comboToString.charAt(i)]
            if (curNum == comboToString.length - 1)
            {
                coolNumber.setPosition((coolCombo.width / 4) - coolNumber.width + 40, (35 * i));
            }
            else
            {
                // coolNumber.setPosition((numberGroup.members[i - 1].x) - (coolNumber.width / 1.35) - (numberGroup.members[i - 1].width / 10), (35 * i));
                coolNumber.setPosition((numberGroup.members[i - 1].x + 40) - (coolNumber.width + x), (35 * i));
            }

            // coolNumber.x -= (coolNumber.width) * (comboToString.length-(i + 1));
            // coolNumber.x += numberOffset[comboToString.charAt(i)];
            // coolNumber.setPosition((coolCombo.x + 610) - (coolNumber.width) -  (100 * (comboToString.length - i)), coolCombo.y);
            // if (coolCombo != null)
            // {
                // coolNumber.setPosition((-coolNumber.width * (comboToString.length - i)) + (coolCombo.x + 568), 0); //35 //coolCombo.y + (35 * (comboToString.length - i)) - 35
            //     //((-50 - (coolNumber.width / 2)) * (comboToString.length - i)) + 
            // }
            // trace("" + (comboToString.length - i));
            numberGroup.add(coolNumber);

            coolNumber.animation.finishCallback = function(combo)
            {
            	numberGroup.clear();
            }
        }
        if (FlxG.save.data.combosound)
        {
            FunkinSound.playOnce(Paths.sound("comboSound"));
        }
        visible = true;
        coolCombo.animation.play("combo", true);

        coolCombo.animation.finishCallback = function(combo)
		{
			visible = false;
        }
    }
}