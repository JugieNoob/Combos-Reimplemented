import funkin.play.PlayState;
import funkin.modding.module.Module;
import funkin.Conductor;
import flixel.FlxG;
import funkin.Highscore;
import flixel.math.FlxMath;
import funkin.save.Save;
import funkin.FunkinMemory;


class NoteCombo extends Module {
    var comboSwoosh:ComboSwoosh;
    var combo = 0;

    var noteHitTime = 0;
    var holdNoteStart = 0;
    var holdNoteEndTime = 0;
    var holdNoteEnd = 0;

    function new (){
        super("Note Combo", 1, {state: PlayState});
        
        if (FlxG.save.data.cachestuff)
        {
            FunkinMemory.cacheSound(Paths.sound("comboSound"));
            FunkinMemory.cacheTexture("noteCombo");
            FunkinMemory.cacheTexture("noteComboNumbers");
        }
    }


    override function onNoteHit(event)
    {
        super.onNoteHit(event);

        if (!FlxG.save.data.comboswoosh)
        {
            return;
        }
        if (!event.note.noteData.getMustHitNote())
        {
            return;
        }
            
        //noteHitTime is now calculated by using steps instead of ms
        noteHitTime = event.note.noteData.getStepTime() + (Conductor.instance.get_bpm() / 16);
        combo++;
        checkSustain();
    }
    
    override function onCountdownStart(event)
    {
        super.onCountdownStart(event);
        initVariables();

    }

    override function onUpdate(event)
    {
        if (!FlxG.save.data.comboswoosh)
        {
            return;
        }
        
        if (Highscore.tallies.combo == 0)
        {
            combo = 0;
        }
        else if (combo >= FlxG.save.data.swooshthreshold)
        {
            if (Conductor.instance.currentStep >= (noteHitTime + holdNoteEnd))
            {
                if (!PlayState.instance.isBotPlayMode)
                {
                    comboSwoosh.playCombo(combo);
                    combo = 0;
                }
            }
        }
           
        super.onUpdate(event);
    }

    function initVariables()
    {
        if (PlayState.instance.isBotPlayMode)
        {
            return;
        }
        if (comboSwoosh != null)
        {
            comboSwoosh.destroy();
        }
      
    
        holdNoteStart = 0;
        holdNoteEnd = 0;
        holdNoteEndTime = 0;
        combo = 0;
        noteHitTime = 0;

        if (FlxG.save.data.comboswoosh)
        {

            comboSwoosh = new ComboSwoosh();
            PlayState.instance.add(comboSwoosh);


            switch (Save.instance.modOptions["ComboSwooshCamera"])
            {
                case "HUD":
                    comboSwoosh.camera = PlayState.instance.camHUD;
                    switch (Save.instance.modOptions["ComboSwooshPosition"])
                    {
                        case "Left":
                            comboSwoosh.setPosition(50 * comboSwoosh.comboScale,300);
                        case "Middle":
                            comboSwoosh.setPosition(400,300);
                        case "Right":
                            comboSwoosh.setPosition((FlxG.width - (comboSwoosh.coolCombo.width)) + (300 + comboSwoosh.coolComboOffset) - 50,300);
                    }
                case "World":     
                    if (PlayState.instance.currentStage != null)
                    {
                        // Check if a girlfriend is available on the current stage, if it isn't go try using the opponent.
                        if (PlayState.instance.currentStage.getGirlfriend() != null)
                        {
                            comboSwoosh.camera = PlayState.instance.camGame;
                            comboSwoosh.setPosition(PlayState.instance.currentStage.getGirlfriend().x, PlayState.instance.currentStage.getGirlfriend().y + (PlayState.instance.currentStage.getGirlfriend().height / 2));
                        }
                        else
                        {
                            comboSwoosh.camera = PlayState.instance.camGame;
                            comboSwoosh.setPosition(PlayState.instance.currentStage.getDad().x, PlayState.instance.currentStage.getDad().y + (PlayState.instance.currentStage.getDad().height / 2));
                        }
                    }
                    else
                    {
                        // Force the Combo Swoosh to use the HUD Camera if a stage is not found.
                        comboSwoosh.camera = PlayState.instance.camHUD;
                    }  
            }
                      
        }
    }

    function checkSustain()
    {
        //Rewrote the sutain note stuff
        if (event.note.noteData.getStepLength() > 0 && event.note.noteData.getMustHitNote())
        {
            holdNoteStart = event.note.noteData.getStepTime();
            holdNoteEnd = FlxMath.roundDecimal(event.note.noteData.getStepLength());
            holdNoteEndTime = Conductor.instance.currentStep + holdNoteEnd + 4;
        }
        else
        {
            holdNoteStart = 0;
            holdNoteEnd = 0;
            holdNoteEndTime = 0;
        }
    }
}
